
% generate subsets with equal numbers of cells for each IC cell type

disp('generating IC training/testing sets...')

N.ICclasses.max = round(length(list.mouse.VIP)*.7); % max number of cells we can get per training group
yNum = [zeros(N.ICclasses.max,1) + 1;zeros(N.ICclasses.max,1) + 2;...
    zeros(N.ICclasses.max,1) + 3;zeros(N.ICclasses.max,1) + 4];         % y numerical labels
y = [repmat([1 0 0 0],N.ICclasses.max,1);repmat([0 1 0 0],N.ICclasses.max,1);...
    repmat([0 0 1 0],N.ICclasses.max,1);repmat([0 0 0 1],N.ICclasses.max,1)]; % y logical labels

for numRands = 1:fits.numRand % generate numRands models
    
    % randomly choose N.ICclasses.max cells of each cell type
    list.mouse.trainPV = list.mouse.PV...
        (1,randperm(length(list.mouse.PV),N.ICclasses.max));
    list.mouse.trainSST = list.mouse.SST...
        (1,randperm(length(list.mouse.SST),N.ICclasses.max));
    list.mouse.trainVIP = list.mouse.VIP...
        (1,randperm(length(list.mouse.VIP),N.ICclasses.max));
    list.mouse.trainPyr = list.mouse.Pyr...
        (1,randperm(length(list.mouse.Pyr),N.ICclasses.max));
    
    % get input values for randomly selected cells
    Xtrain{numRands,1} = [X_IC(list.mouse.trainPV,1),...
        X_IC(list.mouse.trainPV,2),...
        X_IC(list.mouse.trainPV,3);...
        X_IC(list.mouse.trainSST,1),...
        X_IC(list.mouse.trainSST,2),...
        X_IC(list.mouse.trainSST,3);...
        X_IC(list.mouse.trainVIP,1),...
        X_IC(list.mouse.trainVIP,2),...
        X_IC(list.mouse.trainVIP,3);...
        X_IC(list.mouse.trainPyr,1),...
        X_IC(list.mouse.trainPyr,2),...
        X_IC(list.mouse.trainPyr,3)];   % input matrix
    
    % get index for test set cells (i.e., all cells with cell type labels
    % that were not included in random selection of training set
    list.mouse.testPV = list.mouse.PV(...
        ~ismember(list.mouse.PV,list.mouse.trainPV));
    list.mouse.testSST = list.mouse.SST(...
        ~ismember(list.mouse.SST,list.mouse.trainSST));
    list.mouse.testVIP = list.mouse.VIP(...
        ~ismember(list.mouse.VIP,list.mouse.trainVIP));
    list.mouse.testPyr = list.mouse.Pyr(...
        ~ismember(list.mouse.Pyr,list.mouse.trainPyr));
    ytest{numRands,1} = [zeros(length(list.mouse.testPV),1) + 1; ...
        zeros(length(list.mouse.testSST),1) + 2;...
        zeros(length(list.mouse.testVIP),1) + 3;...
        zeros(length(list.mouse.testPyr),1) + 4]; % y test numerical labels
    
    % get input values for testing set cells
    Xtest{numRands,1} = [X_IC(list.mouse.testPV,1),...
        X_IC(list.mouse.testPV,2),...
        X_IC(list.mouse.testPV,3);...
        X_IC(list.mouse.testSST,1),...
        X_IC(list.mouse.testSST,2),...
        X_IC(list.mouse.testSST,3);...
        X_IC(list.mouse.testVIP,1),...
        X_IC(list.mouse.testVIP,2),...
        X_IC(list.mouse.testVIP,3);...
        X_IC(list.mouse.testPyr,1),...
        X_IC(list.mouse.testPyr,2),...
        X_IC(list.mouse.testPyr,3)];   % test input matrix
end

save('ICsets.mat','Xtrain','yNum','y','Xtest','ytest')