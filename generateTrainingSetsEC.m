
% generate subsets with equal numbers of cells for each EC cell type

disp('generating EC training/testing sets...')

N.ECclasses.max = round(length(list.mouseVivo.SST)*.7); % max number of cells we can get per training group
yNum = [zeros(N.ECclasses.max,1) + 1;zeros(N.ECclasses.max,1) + 2;...
    zeros(N.ECclasses.max,1) + 3];         % y numerical labels
y = [repmat([1 0 0],N.ECclasses.max,1);repmat([0 1 0],N.ECclasses.max,1);...
    repmat([0 0 1],N.ECclasses.max,1)]; % y logical labels

for numRands = 1:fits.numRand % generate numRands models
    
    % randomly choose N.ICclasses.max cells of each cell type
    list.mouseVivo.trainPV = list.mouseVivo.PV...
        (1,randperm(length(list.mouseVivo.PV),N.ECclasses.max));
    list.mouseVivo.trainSST = list.mouseVivo.SST...
        (1,randperm(length(list.mouseVivo.SST),N.ECclasses.max));
    list.mouseVivo.trainPyr = list.mouseVivo.broad...
        (1,randperm(length(list.mouseVivo.broad),N.ECclasses.max));
    
    % get input values for randomly selected cells
    Xtrain{numRands,1} = [X_EC(list.mouseVivo.trainPV,1),...
        X_EC(list.mouseVivo.trainPV,2),...
        X_EC(list.mouseVivo.trainPV,3);...
        X_EC(list.mouseVivo.trainSST,1),...
        X_EC(list.mouseVivo.trainSST,2),...
        X_EC(list.mouseVivo.trainSST,3);
        X_EC(list.mouseVivo.trainPyr,1),...
        X_EC(list.mouseVivo.trainPyr,2),...
        X_EC(list.mouseVivo.trainPyr,3)];   % input matrix
    
    % get index for test set cells (i.e., all cells with cell type labels
    % that were not included in random selection of training set
    list.mouseVivo.testPV = list.mouseVivo.PV(...
        ~ismember(list.mouseVivo.PV,list.mouseVivo.trainPV));
    list.mouseVivo.testSST = list.mouseVivo.SST(...
        ~ismember(list.mouseVivo.SST,list.mouseVivo.trainSST));
    list.mouseVivo.testPyr = list.mouseVivo.broad(...
        ~ismember(list.mouseVivo.broad,list.mouseVivo.trainPyr));
    ytest{numRands,1} = [zeros(length(list.mouseVivo.testPV),1) + 1; ...
        zeros(length(list.mouseVivo.testSST),1) + 2;...
        zeros(length(list.mouseVivo.testPyr),1) + 3]; % y test numerical labels
    
    % get input values for testing set cells
    Xtest{numRands,1} = [X_EC(list.mouseVivo.testPV,1),...
        X_EC(list.mouseVivo.testPV,2),...
        X_EC(list.mouseVivo.testPV,3);...
        X_EC(list.mouseVivo.testSST,1),...
        X_EC(list.mouseVivo.testSST,2),...
        X_EC(list.mouseVivo.testSST,3);
        X_EC(list.mouseVivo.testPyr,1),...
        X_EC(list.mouseVivo.testPyr,2),...
        X_EC(list.mouseVivo.testPyr,3)];   % test input matrix
end

save('ECsets.mat')